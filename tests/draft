
<template>
  <q-page padding class="flex col-11 justify-center l-container-wrapper transparentRed">
    <Header :headerTitle="headerTitle"></Header>
    <div class="q-pa-sm" v-for="(item, key, index) in data" v-bind:key="item.id">
      <div class="card">
        <div class="card-body profileBody">
          <div class="profilePic">
            <img class="profileAvatar" src="../statics/profileImg.jpg" alt="Username">
          </div>
          <div class="card-header profileName">
            {{ item.receiverUserName }}
          </div>
          <div class="profileInfo">
            <p>{{ item.receiverUserLogin }}</p>
          </div>
        </div>
      </div>
      <div class="row q-mb-lg" style="max-width: 90vw;">
        <p class="form-style-num"> {{ item.sum }}</p>
        <!--<input type="number" value="{{ item.sum }}" class="form-style-num" readonly/>-->
      </div>
      <div class="row q-mb-lg" style="max-width: 90vw;">
      <p class="fee-style-text">Коммисcия: {{ 0 }} TMT</p>
      </div>
      <div class="row q-mb-lg" style="max-width: 90vw;">
        <p class="col form-style-text"> {{ item.comment }}</p>
        <!--<textarea type="text" value="{{ item.comment }}" class="col form-style-text" readonly></textarea>-->
      </div>
      <div class="row q-mb-lg" style="max-width: 90vw;">
        <q-btn label="Потвердить" class="full-width" style="background: white; color: black; border-radius: 6px;" @click="send()"></q-btn>
      </div>
    </div>
  </q-page>
</template>

<script>
import axios from 'axios'
import { mapState, mapGetters } from 'vuex'
import Header from '../components/ScanHeader'

export default {
  name: 'SendMoney2',
  components: { Header },
  computed: {
    ...mapState([
      'userLogin',
      'userAccount',
      'id'
    ]),
    ...mapGetters({
      userLogin: 'UserLogin',
      userAccount: 'UserAccount'
    }),
    loading () {
      return this.$store.getters.loading
    },
    getID () {
      return this.$store.getters.id
    }
  },
  data: function () {
    return {
      data: {},
      ReceiverUserName: '',
      ReceiverUserLogin: '',
      ReceiverAccountId: '',
      Amount: '',
      Comment: '',
      headerTitle: 'Оплата покупки',
      id: '5eff9370-81cc-11e9-b6ff-d5e32b2d6f0f',
      ID: ''
    }
  },
  methods: {
    loadData: async function () {
      let result = await this.$store.dispatch('requests/find', { query: { id: '5eff9370-81cc-11e9-b6ff-d5e32b2d6f0f' } })
      this.data = result.data
      axios.get('http://192.168.0.126:3030/requests?id=' + this.id)
        .then((response) => {
          response.data.data.map((obj) => {
            this.ReceiverUserName = obj.receiverUserName
            this.ReceiverUserLogin = obj.receiverUserLogin
            this.ReceiverAccountId = obj.receiverAccountId
            this.Amount = obj.sum
            this.Comment = obj.comment
            this.ID = obj.id
          })
        })
        .catch((err) => {
          console.log('err:', err)
        })
      // let ResultQRValue = result.data.toString()
      // let obj = JSON.parse(ResultQRValue)
      // this.ReceiverUserName = obj.receiverUserName
      // this.ReceiverUserLogin = obj.receiverUserLogin
      // this.ReceiverAccountId = obj.receiverAccountId
      // this.Amount = obj.sum
      // this.Comment = obj.comment
      // this.getID
    },
    send () {
      axios({
        method: 'post',
        url: 'http://192.168.0.126:3030/transactions',
        config: { headers: { 'Content-Type': 'application/json' } },
        // data: this.data
        data: {
          'type': 'qr-payment2',
          'id': this.ID,
          'senderUserId': 12345,
          'senderUserLogin': '99612345678',
          'senderAccountId': '1224655656757687687689',
          'senderAccountName': 'Rysgal Bank: 87687689',
          'receiverUserId': 12345,
          'receiverUserLogin': this.ReceiverUserLogin,
          'receiverUserName': this.ReceiverUserName,
          'receiverCustomName': 'Кафе "Chef House"',
          'receiverAccountId': this.ReceiverAccountId,
          'receiverSalespointId': 12345,
          'sum': this.Amount,
          'comment': this.Comment
        }
      })
        // .then(function (res) {
        //   alert(res)
        // })
        .then(this.$router.push('/sendMoney/response'))
        .catch(function (res) {
          // handle error
          alert(res)
        })
    },
    errorHandler: function (errorMessage) {
      this.$q.dialog({
        title: 'Ошибка',
        message: errorMessage
      })
    }

  },
  created () {
    this.loadData()
  },
  mounted () {
    // this.valid()
  }

}

</script>

<style scoped>
  .profileName {
    background:transparent;
    border:0;
    text-align:center;
    font-size:18px;
    font-weight:800;
    color: white;
  }

  .card-body {
    color:#eee;
    margin-top:0.5em;
  }
  .profileAvatar {
    border-radius:20%;
    width: 100px;
    height: 100px;
    transform: scale(0.95);
    transition:all .5s;
    cursor:pointer;
  }
  .profileAvatar:hover {
    transform: scale(1);
    box-shadow: 0 37.125px 70px -12.125px rgba(0,0,0,0.2);
  }
  .profilePic {
    text-align:center;
  }
  .profileInfo {
    margin-top:1em;
    font-weight:200;
    font-size:12px;
    color: white;
    text-align:center;
  }
  .transparentRed {
    background-color: #EB5757;
    opacity: 0.9;
  }
  .form-style-num
  {
    box-sizing: border-box;
    -webkit-box-sizing: border-box;
    -moz-box-sizing: border-box;
    outline: none;
    display: block;
    width: 100%;
    padding: 7px;
    border: none;
    background: transparent;
    margin-bottom: 10px;
    font: 55px Arial, Helvetica, sans-serif;
    height: 70px;
    color: #FFFFFF;
    text-align: center;
  }
  .form-style-text
  {
    box-sizing: border-box;
    -webkit-box-sizing: border-box;
    -moz-box-sizing: border-box;
    outline: none;
    display: block;
    width: 100%;
    padding: 5px;
    border: none;
    background: transparent;
    margin-bottom: 3px;
    font-size: 16px;
    font-family: Arial, Helvetica, sans-serif;
    color: #FFFFFF;
    height: 40px;
    text-align: center;
  }
  .fee-style-text
  {
    box-sizing: border-box;
    -webkit-box-sizing: border-box;
    -moz-box-sizing: border-box;
    outline: none;
    display: block;
    width: 100%;
    padding: 5px;
    border: none;
    background: transparent;
    margin-bottom: 3px;
    font-size: 16px;
    font-family: Arial, Helvetica, sans-serif;
    color: #FFFFFF;
    height: 40px;
    text-align: center;
    opacity: 0.6;
  }
  ::-webkit-input-placeholder {
    text-align: center;
    color: #FFFFFF;
    opacity: 0.6;
  }

  :-moz-placeholder { /* Firefox 18- */
    text-align: center;
    color: #FFFFFF;
  }

  ::-moz-placeholder {  /* Firefox 19+ */
    text-align: center;
    color: #FFFFFF;
  }

  :-ms-input-placeholder {
    text-align: center;
    color: #FFFFFF;
  }
  [placeholder]:focus::-webkit-input-placeholder {
    transition: opacity 0.1s 0.1s ease;
    opacity: 0;
  }

  .input-group-suffix {
    box-sizing: border-box;
    -webkit-box-sizing: border-box;
    -moz-box-sizing: border-box;
    outline: none;
    display: block;
    padding-top: 7px;
    border: none;
    background: transparent;
    margin-top: 48px;
    font: 20px Arial, Inter, sans-serif;
    width: 100%;
    margin-bottom: 3px;
    color: #FFFFFF;
    height: 40px;
    text-align: left;
  }

  .suffix input {
    border-radius: 0;
  }
  .suffix .input-group-suffix {
    border-left: 0;
    border-radius: 0;
  }
  textarea {
    resize: vertical;
  }
</style>
